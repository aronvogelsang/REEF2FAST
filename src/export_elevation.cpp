#include "export_elevation.hpp"
#include "common.hpp"
#include <fstream>
#include <iostream>
#include <set>
#include <map>
#include <vector>
#include <cmath>
#include <algorithm>

void write_surface_elevation(const Wavefield& wf,
                             const std::string& filename,
                             double wave_dt,
                             int timestep,
                             bool append)
{
    const std::string fullpath = "../output/" + filename;
    std::ofstream file(fullpath, append ? std::ios::app : std::ios::out);

    if (!file.is_open()) {
        std::cerr << "[Error] Could not open " << fullpath << " for writing.\n";
        return;
    }

    // Collect surface points
    std::set<double> x_coords, y_coords;
    std::map<double, std::vector<std::pair<double, double>>> y_to_xelev;

    for (const auto& e : wf) {
        if (round_to(e.z) == 0.0) {
            double x = round_to(e.x);
            double y = round_to(e.y);
            x_coords.insert(x);
            y_coords.insert(y);
            y_to_xelev[y].emplace_back(x, e.elevation);
        }
    }

    if (y_to_xelev.empty()) {
        std::cerr << "[Warning] No surface points (z â‰ˆ 0.0) found at timestep " << timestep << "\n";
        file.close();
        return;
    }

    // Write header only for first timestep
    if (!append) {
        if (x_coords.size() < 2 || y_coords.size() < 2) {
            std::cerr << "[Error] Not enough surface points for grid metadata.\n";
            file.close();
            return;
        }

        double dx = *std::next(x_coords.begin()) - *x_coords.begin();
        double dy = *std::next(y_coords.begin()) - *y_coords.begin();

        file << "This surface elevation file was generated by REEF2FAST\n";
        file << "Surface elevation relative to still water level (m)\n";
        file << "! " << format_scientific(wave_dt) << "  - WaveDT (s)\n";
        file << "! " << x_coords.size() << "  - NX*2 - 1\n";
        file << "! " << y_coords.size() << "  - NY*2 - 1\n";
        file << "! " << format_scientific(dx) << "  - dX (m)\n";
        file << "! " << format_scientific(dy) << "  - dY (m)\n";
        file << "!\n!\n!\n!\n";
        file << "! "; for (const auto& x : x_coords) file << format_scientific(x) << " "; file << "- X positions\n";
        file << "! "; for (const auto& y : y_coords) file << format_scientific(y) << " "; file << "- Y positions\n";
    }

    // Write elevation data grouped by Y
    for (auto& [y, vec] : y_to_xelev) {
        std::sort(vec.begin(), vec.end()); // sort by x
        for (const auto& [x, eta] : vec) {
            file << format_scientific(eta) << " ";
        }
        file << "! Y = " << format_scientific(y)
             << ", Time = " << format_scientific(timestep * wave_dt) << "\n";
    }

    file << std::flush;
    file.close();
}