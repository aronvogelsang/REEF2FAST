#include "export.hpp"
#include "common.hpp"
#include <iostream>
#include <fstream>
#include <set>
#include <map>
#include <vector>
#include <cmath>
#include <algorithm>

void write_wave_component(const Wavefield& wf,
                          const std::string& filename,
                          const std::string& component_name,
                          const std::string& description,
                          std::function<double(const WavefieldEntry&)> accessor,
                          double wave_dt,
                          int timestep,
                          bool append)
{
    std::ofstream file;
    if (append) {
        file.open("../output/" + filename, std::ios::app);
    } else {
        file.open("../output/" + filename);
    }

    if (!file) {
        std::cerr << "Error: Could not open " << filename << " for writing.\n";
        return;
    }

    // Write header only if file is new
    if (!append) {
        std::set<double> x_coords, y_coords, z_coords;

        for (const auto& e : wf) {
            x_coords.insert(e.x);
            y_coords.insert(e.y);
            z_coords.insert(e.z);
        }

        if (x_coords.size() < 2 || y_coords.size() < 2 || z_coords.size() < 2) {
            std::cerr << "Insufficient spatial resolution in grid.\n";
            return;
        }

        double dx = *std::next(x_coords.begin()) - *x_coords.begin();
        double dy = *std::next(y_coords.begin()) - *y_coords.begin();
        double z_max = *z_coords.rbegin();
        double dthetaZ = M_PI / (2.0 * (z_coords.size() - 1));

        file << "This wave kinematics file was generated by REEF2FAST\n";
        file << description << "\n";
        file << "! " << format_scientific(wave_dt) << "  - WaveDT (s)\n";
        file << "! " << x_coords.size() << "  - NX*2 - 1\n";
        file << "! " << y_coords.size() << "  - NY*2 - 1\n";
        file << "! " << z_coords.size() << "  - NZ\n";
        file << "! " << format_scientific(dx) << "  - dX (m)\n";
        file << "! " << format_scientific(dy) << "  - dY (m)\n";
        file << "! " << format_scientific(z_max) << "  - Z_Depth (m)\n";
        file << "! " << format_scientific(dthetaZ) << "  - dthetaZ (rad)\n";

        file << "! "; for (const auto& x : x_coords) file << format_scientific(x) << " "; file << "- X-Locations (m)\n";
        file << "! "; for (const auto& y : y_coords) file << format_scientific(y) << " "; file << "- Y-Locations (m)\n";
        file << "! "; for (const auto& z : z_coords) file << format_scientific(z) << " "; file << "- Z-Locations (m)\n";
    }

    // Group values by z → y → [vx1, vx2, ...] at each x
    std::map<double, std::map<double, std::vector<double>>> grouped;
    for (const auto& e : wf) {
        double z = round_to(e.z);
        double y = round_to(e.y);
        grouped[z][y].push_back(accessor(e));
    }

    for (const auto& [z, y_map] : grouped) {
        for (const auto& [y, values] : y_map) {
            for (const auto& v : values) {
                file << format_scientific(v) << " ";
            }
            file << "! All X values at Y = " << format_scientific(y)
                 << ", Z = " << format_scientific(z)
                 << ", Time = " << format_scientific(timestep * wave_dt) << "\n";
        }
    }

    file.close();
}

void generate_all_wavefiles(const Wavefield& wf,
                            double wave_dt,
                            int timestep,
                            bool append)
{
    write_wave_component(wf, "REEF2FAST.Vxi", "vx", "Fluid Velocity along X-direction (m/s)", [](const WavefieldEntry& e) { return e.vx; }, wave_dt, timestep, append);
    write_wave_component(wf, "REEF2FAST.Vyi", "vy", "Fluid Velocity along Y-direction (m/s)", [](const WavefieldEntry& e) { return e.vy; }, wave_dt, timestep, append);
    write_wave_component(wf, "REEF2FAST.Vzi", "vz", "Fluid Velocity along Z-direction (m/s)", [](const WavefieldEntry& e) { return e.vz; }, wave_dt, timestep, append);
    write_wave_component(wf, "REEF2FAST.Axi", "ax", "Fluid Acceleration along X-direction (m/s²)", [](const WavefieldEntry& e) { return e.ax; }, wave_dt, timestep, append);
    write_wave_component(wf, "REEF2FAST.Ayi", "ay", "Fluid Acceleration along Y-direction (m/s²)", [](const WavefieldEntry& e) { return e.ay; }, wave_dt, timestep, append);
    write_wave_component(wf, "REEF2FAST.Azi", "az", "Fluid Acceleration along Z-direction (m/s²)", [](const WavefieldEntry& e) { return e.az; }, wave_dt, timestep, append);
    write_wave_component(wf, "REEF2FAST.DynP", "pressure", "Dynamic Pressure (Pa)", [](const WavefieldEntry& e) { return e.pressure; }, wave_dt, timestep, append);
}