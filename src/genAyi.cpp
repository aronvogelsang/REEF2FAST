/*#include "genAyi.hpp"
#include "common.hpp"
#include <iostream>
#include <fstream>
#include <vector>
#include <sstream>
#include <set>
#include <map>
#include <iomanip>
#include <cmath>

using namespace std;

void write_seastate_ayi(const string& filename, const vector<DataPoint>& data, double wave_dt, double wave_tmax) {
    ofstream file("../output/" + filename);
    if (!file) {
        cerr << "Error: Could not create " << filename << endl;
        return;
    }

    set<double> x_coords, y_coords, z_coords;
    map<int, vector<DataPoint>> time_data;
    
    for (const auto& dp : data) {
        x_coords.insert(dp.x);
        y_coords.insert(dp.y);
        z_coords.insert(dp.z);
        time_data[dp.timestep].push_back(dp);
    }

    double dx = *next(x_coords.begin()) - *x_coords.begin();
    double dy = *next(y_coords.begin()) - *y_coords.begin();
    double z_max = *z_coords.rbegin();
    double dthetaZ = 3.14159 / (2 * (z_coords.size() - 1));

    cout << "Writing " << filename << "...\n";

    // Header
    file << "This wave kinematics file was generated by REEF2FAST\n";
    file << "Fluid Acceleration along the Y-direction (m/s^2)\n";
    file << "! " << format_scientific(wave_dt) << "  - WaveDT (s)\n";
    file << "! " << x_coords.size() << "  - Number of X grid points [NX*2 - 1]\n";
    file << "! " << y_coords.size() << "  - Number of Y grid points [NY*2 - 1]\n";
    file << "! " << z_coords.size() << "  - Number of Z grid points [NZ]\n";
    file << "! " << format_scientific(dx) << "  - X grid spacing (m) [dX]\n";
    file << "! " << format_scientific(dy) << "  - Y grid spacing (m) [dY]\n";
    file << "! " << format_scientific(z_max) << "  - Lowest Z Depth (m) [Z_Depth]\n";
    file << "! " << format_scientific(dthetaZ) << "  - Z grid spacing (radians) [dthetaZ]\n";

    // X, Y, Z locations
    file << "! ";
    for (const auto& x : x_coords) {
        file << format_scientific(x) << " ";
    }
    file << "- X-Locations (m)\n";

    file << "! ";
    for (const auto& y : y_coords) {
        file << format_scientific(y) << " ";
    }
    file << "- Y-Locations (m)\n";

    file << "! ";
    for (const auto& z : z_coords) {
        file << format_scientific(z) << " ";
    }
    file << "- Z-Locations (m)\n";

    // Ay Data - sorted by timestep, then Z, then Y
    for (const auto& [timestep, points] : time_data) {
        map<double, map<double, vector<double>>> sorted_data;
        
        for (const auto& dp : points) {
            sorted_data[dp.z][dp.y].push_back(dp.ay);
        }

        for (const auto& [z, y_map] : sorted_data) {
            for (const auto& [y, ay_values] : y_map) {
                for (const auto& ay : ay_values) {
                    file << format_scientific(ay) << " ";
                }
                file << "! All X grid locations at Y = " << format_scientific(y)
                     << ", Z = " << format_scientific(z)
                     << ", WaveTime = " << format_scientific(timestep * wave_dt) << "\n";
            }
        }
    }

    file.close();
    cout << "File saved: " << filename << endl;
}

void generate_seastate_ayi() {
    string wavefield_file = "../output/interpolated_wavefield.csv";
    string control_file = "../data/ctrl.txt";
    

    vector<DataPoint> data = read_wavefield_csv(wavefield_file);
    if (data.empty()) return;

    double wave_dt, wave_tmax;
    if (!read_wave_params(control_file, wave_dt, wave_tmax)) return;

    write_seastate_ayi("REEF2FAST.Ayi", data, wave_dt, wave_tmax);
}*/