#include "genSeaState.hpp"
#include "common.hpp"
#include <iostream>
#include <fstream>
#include <sstream>

using namespace std;

// reads in WaveTMax, WaveDT, WaveHs und WaveTp from ctrl.txt
bool read_wave_parameters(const string& filename, double& sim_time, double& wave_dt, 
                          double& wave_hs, double& wave_tp) {
    ifstream file(filename);
    if (!file) {
        cerr << "Error: Could not open " << filename << endl;
        return false;
    }

    string line;
    while (getline(file, line)) {
        istringstream iss(line);
        string key;
        iss >> key;
        if (key == "N") {
            int param;
            iss >> param;
            if (param == 41) {
                iss >> sim_time;
            }
        } else if (key == "P") {
            int param;
            iss >> param;
            if (param == 30) {
                iss >> wave_dt;
            }
        } else if (key == "B") {
            int param;
            iss >> param;
            if (param == 93) {
                iss >> wave_hs >> wave_tp;
            }
        }
    }
    file.close();
    return true;
}

// This function generates the main input file for OpenFAST simulation with a flag on SeaState.
void generate_seastate(double X_MIN, double X_MAX, double Y_MIN, double Y_MAX, double Z_MIN, double Z_MAX, 
                       int NX, int NY, int NZ, double sim_time, double wave_dt, double wave_hs, double wave_tp) {
    string output_filename = "../output/REEF2FAST.dat";
    ofstream outfile(output_filename);
    if (!outfile) {
        cerr << "Error: Could not create " << output_filename << endl;
        return;
    }

    double X_HalfWidth = (X_MAX - X_MIN) / 2.0;
    double Y_HalfWidth = (Y_MAX - Y_MIN) / 2.0;
    int Z_Depth = Z_MAX - Z_MIN;

    outfile << "------- SeaState Input File ----------------------------------------------------\n";
    outfile << "This file was generated by REEF2FAST.\n";
    outfile << "False            Echo           - Echo the input file data (flag)\n";
    outfile << "---------------------- ENVIRONMENTAL CONDITIONS --------------------------------\n";
    outfile << "\"default\"        WtrDens        - Water density (kg/m^3)\n";
    outfile << "\"default\"        WtrDpth        - Water depth (meters) relative to MSL\n";
    outfile << "\"default\"        MSL2SWL        - Offset between still-water level and mean sea level (meters) [positive upward; unused when WaveMod = 6; must be zero if PotMod=1 or 2]\n";
    outfile << "---------------------- SPATIAL DISCRETIZATION ---------------------------------------------------\n";
    outfile << "        " << X_HalfWidth << "  X_HalfWidth    - Half-width of the domain in the X direction (m) [>0, NOTE: X[nX] = nX*dX, where nX = {-NX+1,-NX+2,…,NX-1} and dX = X_HalfWidth/(NX-1)]\n";
    outfile << "        " << Y_HalfWidth << "  Y_HalfWidth    - Half-width of the domain in the Y direction (m) [>0, NOTE: Y[nY] = nY*dY, where nY = {-NY+1,-NY+2,…,NY-1} and dY = Y_HalfWidth/(NY-1)]\n";
    outfile << "        " << Z_Depth << "  Z_Depth        - Depth of the domain the Z direction (m) relative to SWL [0 < Z_Depth <= WtrDpth+MSL2SWL; \"default\": Z_Depth = WtrDpth+MSL2SWL; Z[nZ] = ( COS( nZ*dthetaZ ) – 1 )*Z_Depth, where nZ = {0,1,…NZ-1} and dthetaZ = pi/( 2*(NZ-1) )]\n";
    outfile << "        " << NX/2 << "  NX             - Number of nodes in half of the X-direction domain (-) [>=2]\n";
    outfile << "        " << NY/2 << "  NY             - Number of nodes in half of the Y-direction domain (-) [>=2]\n";
    outfile << "        " << NZ << "  NZ             - Number of nodes in the Z direction (-) [>=2]\n";
    outfile << "---------------------- WAVES ---------------------------------------------------\n";
    outfile << "        6   WaveMod        - Incident wave kinematics model {0: none=still water, 1: regular (periodic), 1P#: regular with user-specified phase, 2: JONSWAP/Pierson-Moskowitz spectrum (irregular), 3: White noise spectrum (irregular), 4: user-defined spectrum from routine UserWaveSpctrm (irregular), 5: Externally generated wave-elevation time series, 6: Externally generated full wave-kinematics time series, 7: wave frequency components [option 6 is invalid for PotMod/=0]} (switch)\n";
    outfile << "        0   WaveStMod      - Model for stretching incident wave kinematics to instantaneous free surface {0: none=no stretching, 1: vertical stretching, 2: extrapolation stretching, 3: Wheeler stretching} (switch) [unused when WaveMod=0 or when PotMod/=0]\n";
    outfile << "        " << sim_time << "   WaveTMax      - Analysis time for incident wave calculations (sec)\n";
    outfile << "        " << wave_dt << "   WaveDT         - Time step for incident wave calculations (sec)\n";
    outfile << "        " << wave_hs << "   WaveHs         - Significant wave height (meters)\n";
    outfile << "        " << wave_tp << "   WaveTp         - Peak-spectral period of incident waves (sec)\n";
    outfile << "       \"DEFAULT\"        WavePkShp      - Peak-shape parameter of incident wave spectrum (-) or DEFAULT (string) [used only when WaveMod=2; use 1.0 for Pierson-Moskowitz]\n";
    outfile << "      0.314159   WvLowCOff      - Low  cut-off frequency or lower frequency limit of the wave spectrum beyond which the wave spectrum is zeroed (rad/s) [unused when WaveMod=0, 1, 6, or 7]\n";
    outfile << "      1.570796   WvHiCOff       - High cut-off frequency or upper frequency limit of the wave spectrum beyond which the wave spectrum is zeroed (rad/s) [unused when WaveMod=0, 1, 6, or 7]\n";
    outfile << "             0   WaveDir        - Incident wave propagation heading direction                         (degrees) [unused when WaveMod=0, 6 or 7]\n";
    outfile << "             0   WaveDirMod     - Directional spreading function {0: none, 1: COS2S}                  (-)       [only used when WaveMod=2,3, or 4]\n";
    outfile << "             1   WaveDirSpread  - Wave direction spreading coefficient ( > 0 )                        (-)       [only used when WaveMod=2,3, or 4 and WaveDirMod=1]\n";
    outfile << "             1   WaveNDir       - Number of wave directions                                           (-)       [only used when WaveMod=2,3, or 4 and WaveDirMod=1; odd number only]\n";
    outfile << "             0   WaveDirRange   - Range of wave directions (full range: WaveDir +/- 1/2*WaveDirRange) (degrees) [only used when WaveMod=2,3,or 4 and WaveDirMod=1]\n";
    outfile << "     123456789   WaveSeed(1)    - First  random seed of incident waves [-2147483648 to 2147483647]    (-)       [unused when WaveMod=0, 5, or 6]\n";
    outfile << "       \"RANLUX\"         WaveSeed(2)    - Second random seed of incident waves [-2147483648 to 2147483647] for intrinsic pRNG, or an alternative pRNG: \"RanLux\" (-)       [unused when WaveMod=0, 5, or 6]\n";
    outfile << "       FALSE            WaveNDAmp      - Flag for normally distributed amplitudes                            (flag)    [only used when WaveMod=2, 3, or 4]\n";
    outfile << "       \"REEF2FAST\"        WvKinFile      - Root name of externally generated wave data file(s)\n";
    outfile << "---------------------- 2ND-ORDER WAVES ----------------------------------------- [unused with WaveMod=0 or 6]\n";
    outfile << "FALSE            WvDiffQTF      - Full difference-frequency 2nd-order wave kinematics (flag)\n";
    outfile << "FALSE            WvSumQTF       - Full summation-frequency  2nd-order wave kinematics (flag)\n";
    outfile << "             0   WvLowCOffD     - Low  frequency cutoff used in the difference-frequencies (rad/s) [Only used with a difference-frequency method]\n";
    outfile << "      1.256637   WvHiCOffD      - High frequency cutoff used in the difference-frequencies (rad/s) [Only used with a difference-frequency method]\n";
    outfile << "      0.618319   WvLowCOffS     - Low  frequency cutoff used in the summation-frequencies  (rad/s) [Only used with a summation-frequency  method]\n";
    outfile << "      3.141593   WvHiCOffS      - High frequency cutoff used in the summation-frequencies  (rad/s) [Only used with a summation-frequency  method]\n";
    outfile << "---------------------- CONSTRAINED WAVES ---------------------------------------\n";
    outfile << "             0   ConstWaveMod   - Constrained wave model: 0=none; 1=Constrained wave with specified crest elevation, alpha; 2=Constrained wave with guaranteed peak-to-trough crest height, HCrest (flag)\n";
    outfile << "             1   CrestHmax      - Crest height (2*alpha for ConstWaveMod=1 or HCrest for ConstWaveMod=2), must be larger than WaveHs (m) [unused when ConstWaveMod=0]\n";
    outfile << "             "<< wave_dt << "   CrestTime      - Time at which the crest appears (s) [unused when ConstWaveMod=0]\n";
    outfile << "             0   CrestXi        - X-position of the crest (m) [unused when ConstWaveMod=0]\n";
    outfile << "             0   CrestYi        - Y-position of the crest (m) [unused when ConstWaveMod=0]\n";
    outfile << "---------------------- CURRENT ------------------------------------------------- [unused with WaveMod=6]\n";
    outfile << "             0   CurrMod        - Current profile model {0: none=no current, 1: standard, 2: user-defined from routine UserCurrent} (switch)\n";
    outfile << "             0   CurrSSV0       - Sub-surface current velocity at still water level  (m/s) [used only when CurrMod=1]\n";
    outfile << "\"DEFAULT\"        CurrSSDir    - Sub-surface current heading direction (degrees) or DEFAULT (string) [used only when CurrMod=1]\n";
    outfile << "            20   CurrNSRef      - Near-surface current reference depth            (meters) [used only when CurrMod=1]\n";
    outfile << "             0   CurrNSV0       - Near-surface current velocity at still water level (m/s) [used only when CurrMod=1]\n";
    outfile << "             0   CurrNSDir      - Near-surface current heading direction         (degrees) [used only when CurrMod=1]\n";
    outfile << "             0   CurrDIV        - Depth-independent current velocity                 (m/s) [used only when CurrMod=1]\n";
    outfile << "             0   CurrDIDir      - Depth-independent current heading direction    (degrees) [used only when CurrMod=1]\n";
    outfile << "---------------------- MacCamy-Fuchs diffraction model -------------------------\n";
    outfile << "             0   MCFD           - MacCamy-Fuchs member radius (ignored if radius <= 0) [must be 0 when WaveMod 0 or 6]\n";
    outfile << "---------------------- OUTPUT --------------------------------------------------\n";
    outfile << " True            SeaStSum       - Output a summary file [flag]\n";
    outfile << "             1   OutSwtch       - Output requested channels to: [1=SeaState.out, 2=GlueCode.out, 3=both files]\n";
    outfile << "\"E15.7e2\"        OutFmt       - Output format for numerical results (quoted string) [not checked for validity!]\n";
    outfile << "\"A11\"            OutSFmt      - Output format for header strings (quoted string) [not checked for validity!]\n";
    outfile << "             1   NWaveElev      - Number of points where the incident wave elevations can be computed (-)       [maximum of 9 output locations]\n";
    outfile << "             0   WaveElevxi     - List of xi-coordinates for points where the incident wave elevations can be output (meters) [NWaveElev points, separated by commas or white space; usused if NWaveElev = 0]\n";
    outfile << "             0   WaveElevyi     - List of yi-coordinates for points where the incident wave elevations can be output (meters) [NWaveElev points, separated by commas or white space; usused if NWaveElev = 0]\n";
    outfile << "             1   NWaveKin       - Number of points where the wave kinematics can be output (-)       [maximum of 9 output locations]\n";
    outfile << "             0   WaveKinxi      - List of xi-coordinates for points where the wave kinematics can be output (meters) [NWaveKin points, separated by commas or white space; usused if NWaveKin = 0]\n";
    outfile << "             0   WaveKinyi      - List of yi-coordinates for points where the wave kinematics can be output (meters) [NWaveKin points, separated by commas or white space; usused if NWaveKin = 0]\n";
    outfile << "             0   WaveKinzi      - List of zi-coordinates for points where the wave kinematics can be output (meters) [NWaveKin points, separated by commas or white space; usused if NWaveKin = 0]\n";
    outfile << "---------------------- OUTPUT CHANNELS -----------------------------------------\n";
    outfile << "\"Wave1Elev\"\n";
    outfile << "END of output channels and end of file. (the word \"END\" must appear in the first 3 columns of this line)\n";
    outfile.close();


    cout << "REEF2FAST.dat successfully created at " << output_filename << endl;
}