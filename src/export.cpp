// export.cpp
#include "cloud.hpp"
#include "common.hpp"
#include <iostream>
#include <fstream>
#include <sstream>
#include <map>
#include <set>
#include <vector>
#include <iomanip>
#include <functional>

using namespace std;


// Writes one .XXX file (vx, vy, vz, ax, ay, az, pressure)
void write_wave_component(const InterpolatedWavefield& wf,
                          const string& filename,
                          const string& component_name,
                          const string& description,
                          function<double(const WavefieldEntry&)> accessor,
                          double wave_dt, double wave_tmax) {

    ofstream file("../output/" + filename);
    if (!file) {
        cerr << "Error: Could not create " << filename << endl;
        return;
    }

    set<double> x_coords, y_coords, z_coords;
    map<int, vector<WavefieldEntry>> time_data;

    for (size_t t = 0; t < wf.timesteps.size(); ++t) {
        time_data[t] = wf.timesteps[t];
        for (const auto& entry : wf.timesteps[t]) {
            x_coords.insert(entry.x);
            y_coords.insert(entry.y);
            z_coords.insert(entry.z);
        }

    }

    if (x_coords.size() < 2 || y_coords.size() < 2 || z_coords.size() < 2) {
        cerr << "Not enough points to compute grid spacing.\n";
        return;
    }

    double dx = *next(x_coords.begin()) - *x_coords.begin();
    double dy = *next(y_coords.begin()) - *y_coords.begin();
    double z_max = *z_coords.rbegin();
    double dthetaZ = M_PI / (2 * (z_coords.size() - 1));

    cout << "Writing " << filename << "...\n";

    // Header
    file << "This wave kinematics file was generated by REEF2FAST\n";
    file << description << "\n";
    file << "! " << format_scientific(wave_dt) << "  - WaveDT (s)\n";
    file << "! " << x_coords.size() << "  - Number of X grid points [NX*2 - 1]\n";
    file << "! " << y_coords.size() << "  - Number of Y grid points [NY*2 - 1]\n";
    file << "! " << z_coords.size() << "  - Number of Z grid points [NZ]\n";
    file << "! " << format_scientific(dx) << "  - X grid spacing (m) [dX]\n";
    file << "! " << format_scientific(dy) << "  - Y grid spacing (m) [dY]\n";
    file << "! " << format_scientific(z_max) << "  - Lowest Z Depth (m) [Z_Depth]\n";
    file << "! " << format_scientific(dthetaZ) << "  - Z grid spacing (radians) [dthetaZ]\n";

    file << "! "; for (auto x : x_coords) file << format_scientific(x) << " "; file << "- X-Locations (m)\n";
    file << "! "; for (auto y : y_coords) file << format_scientific(y) << " "; file << "- Y-Locations (m)\n";
    file << "! "; for (auto z : z_coords) file << format_scientific(z) << " "; file << "- Z-Locations (m)\n";

    // Write sorted data
    for (const auto& [timestep, entries] : time_data) {
        map<double, map<double, vector<double>>> sorted_data; // z -> y -> x-values

        for (const auto& entry : entries) {
            double z = round_to(entry.z);
            double y = round_to(entry.y);
            sorted_data[z][y].push_back(accessor(entry));
        }
        
        for (const auto& [z, y_map] : sorted_data) {
            for (const auto& [y, values] : y_map) {
                for (const auto& val : values) {
                    file << format_scientific(val) << " ";
                }
                file << "! All X grid locations at Y = " << format_scientific(y)
                     << ", Z = " << format_scientific(z)
                     << ", WaveTime = " << format_scientific(timestep * wave_dt) << "\n";
            }
        }
    }

    file.close();
    cout << "File saved: " << filename << endl;
}

// Wrapper to write all components
void generate_all_wavefiles(const InterpolatedWavefield& wf, double wave_dt, double wave_tmax) {
    write_wave_component(wf, "REEF2FAST.Vxi", "vx", "Fluid Velocity along the X-direction (m/s)", [](const WavefieldEntry& e) { return e.vx; }, wave_dt, wave_tmax);
    write_wave_component(wf, "REEF2FAST.Vyi", "vy", "Fluid Velocity along the Y-direction (m/s)", [](const WavefieldEntry& e) { return e.vy; }, wave_dt, wave_tmax);
    write_wave_component(wf, "REEF2FAST.Vzi", "vz", "Fluid Velocity along the Z-direction (m/s)", [](const WavefieldEntry& e) { return e.vz; }, wave_dt, wave_tmax);
    write_wave_component(wf, "REEF2FAST.Axi", "ax", "Fluid Acceleration along the X-direction (m/s^2)", [](const WavefieldEntry& e) { return e.ax; }, wave_dt, wave_tmax);
    write_wave_component(wf, "REEF2FAST.Ayi", "ay", "Fluid Acceleration along the Y-direction (m/s^2)", [](const WavefieldEntry& e) { return e.ay; }, wave_dt, wave_tmax);
    write_wave_component(wf, "REEF2FAST.Azi", "az", "Fluid Acceleration along the Z-direction (m/s^2)", [](const WavefieldEntry& e) { return e.az; }, wave_dt, wave_tmax);
    write_wave_component(wf, "REEF2FAST.DynP", "pressure", "Dynamic Pressure (Pa)", [](const WavefieldEntry& e) { return e.pressure; }, wave_dt, wave_tmax);
}
